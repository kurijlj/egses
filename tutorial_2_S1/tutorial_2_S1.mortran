%C80
"#############################################################################"
"                                                                             "
"  EGSnrc tutorial_2_S1 application                                           "
"  Copyright (C) 2015 National Research Council Canada                        "
"                                                                             "
"  This file is part of EGSnrc.                                               "
"                                                                             "
"  EGSnrc is free software: you can redistribute it and/or modify it under    "
"  the terms of the GNU Affero General Public License as published by the     "
"  Free Software Foundation, either version 3 of the License, or (at your     "
"  option) any later version.                                                 "
"                                                                             "
"  EGSnrc is distributed in the hope that it will be useful, but WITHOUT ANY  "
"  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  "
"  FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for   "
"  more details.                                                              "
"                                                                             "
"  You should have received a copy of the GNU Affero General Public License   "
"  along with EGSnrc. If not, see <http://www.gnu.org/licenses/>.             "
"                                                                             "
"#############################################################################"
"                                                                             "
"  Author:          Dave Roger, 1985                                          "
"                                                                             "
"  Contributors:    Iwan Kawrakow                                             "
"                   Reid Townson                                              "
"                                                                             "
"#############################################################################"
"                                                                             "
"  An EGSnrc user code which calculates the total amount of energy reflected, "
"  deposited and transmitted when a 20 MeV beam of electrons is incident on   "
"  a  1 mm slab of tantalum.                                                  "
"                                                                             "
"  Iwan Kawrakow, 2003: Adapted to new EGSnrc MP system by adding call        "
"  egs_init at the beginning and call egs_finish at the end.                  "
"                                                                             "
"#############################################################################"


%L
%E
!INDENT M 4;    "indent each mortran nesting level by 4"
!INDENT F 2;    "indent each fortran nesting level by 2"
$IMPLICIT-NONE;
$INTEGER I, IQIN, IRIN, NCASE;
$REAL XIN, YIN, ZIN, EIN, WTIN, UIN, VIN, WIN, ANORM, TOTAL;
"---------------------------------------------------------------------"
"STEP 1:  USER-OVERRIDE-OF-EGSnrc-MACROS                              "
"---------------------------------------------------------------------"
REPLACE {$MXMED} WITH {1}     "number of different mediums used"
REPLACE {$MXREG} WITH {11}    "number of scoring regions"
REPLACE {$MXSTACK} WITH {15}  "less than 15 particles on stack at once"
REPLACE {$REGTHCK} WITH {0.5} "regions thickness"

"DEFINE A COMMON TO PASS INFORMATION TO THE GEOMETRY ROUTINE HOWFAR"
REPLACE {;COMIN/GEOM/;} WITH {;COMMON/GEOM/ZBOUNDS($MXREG - 1); $REAL ZBOUNDS;}
REPLACE {$CALL-HOWNEAR(#);} WITH {
   ;CALL HOWNEAR({P1}, X(NP), Y(NP), Z(NP), IRL);
}

"Define a COMMON for scoring in AUSGAB"
REPLACE {;COMIN/SCORE/;} WITH {;COMMON/SCORE/ESCORE($MXREG);REAL*8 ESCORE;}

;COMIN/BOUNDS,GEOM,MEDIA,MISC,SCORE,THRESH,USEFUL/;"NOTE ; BEFORE COMIN"
"       The above expands into a series of COMMON statements"
"       BOUNDS contains ECUT and PCUT"
"       GEOM passes info to our HOWFAR routine"
"       MEDIA contains the array MEDIA"
"       MISC contains MED"
"       SCORE contains the scoring array ESCORE"
"       THRESH contains various thresholds"
"       THRESH CONTAINS AE AND AP"
"       USEFUL contains PRM"

"---------------------------------------------------------------------"
"STEP 2 PRE-HATCH-CALL-INITIALIZATION                                 "
"---------------------------------------------------------------------"
CHARACTER*4 MEDARR(24);
DATA MEDARR /$S'H2O', 21*' '/; "Place medium name in an array."
"                               $S is a MORTRAN macro to expand strings."

" Initialize the EGSnrc system "
call egs_init;

"NMED and DUNIT default to 1, i.e. one medium and we work in cm."

DO I = 1,24 [MEDIA(I, 1) = MEDARR(I);]

MED($MXREG) = 0; "Last region must be vacuum."
DO I = 1,$MXREG-1 [
   MED(I) = 1; "   Assign H2O as material."
   ECUT(I) = 0.7; "Terminate electron histories at 0.7 MeV in the material."
   PCUT(I) = 0.1; "Terminate photon histories at 0.1 MeV in the material."
]

%E  "tutorial_2_S1.mortran"
"---------------------------------------------------------------------"
"STEP 3   HATCH-CALL                                                  "
"---------------------------------------------------------------------"

;OUTPUT;(/' Start tutorial_2_S1'//' CALL HATCH to get cross-section data'/);
CALL HATCH;" Pick up cross section data for H2O."
"            Data file must be assigned to unit 12."

;OUTPUT AE(1)-PRM, AP(1);
(/' knock-on electrons can be created and any electron followed down to'
  /T40,F8.3,' MeV kinetic energy'/
' brem photons can be created and any photon followed down to      ',
  /T40,F8.3,' MeV ');
"Compton events can create electrons and photons below these cutoffs."

"---------------------------------------------------------------------"
"STEP 4  INITIALIZATION-FOR-HOWFAR and HOWNEAR                        "
"---------------------------------------------------------------------"
ZBOUNDS(1) = $REGTHCK;
DO I = 2,$MXREG-1 [ZBOUNDS(I) = ZBOUNDS(I - 1) + $REGTHCK;]

"---------------------------------------------------------------------"
"STEP 5  INITIALIZATION-FOR-AUSGAB                                    "
"---------------------------------------------------------------------"
DO I = 1,4 [ESCORE(I) = 0.0;] "Zero out scoring array before starting."

"---------------------------------------------------------------------"
"STEP 6   DETERMINATION-OF-INICIDENT-PARTICLE-PARAMETERS              "
"---------------------------------------------------------------------"
"Define initial variables for 20 MeV beam of electrons incident"
"perpendicular to the surface of material."

IQIN = -1; "                 incident charge - electrons"
EIN = 10 + PRM; "            20 MeV kinetic energy"
/XIN,YIN,ZIN/ = 0.0; "       incident at origin"
/UIN,VIN/ = 0.0; WIN = 1.0;" moving along Z axis"
IRIN = 1; "                  starts in region 2, could be 1"
WTIN = 1.0; "                weight = 1 since no variance reduction used"
"---------------------------------------------------------------------"
"STEP 7   SHOWER-CALL                                                 "
"---------------------------------------------------------------------"
NCASE = 10000; "INITIATE THE SHOWER NCASE TIMES"

DO I = 1,NCASE [
   CALL SHOWER(IQIN,EIN,XIN,YIN,ZIN,UIN,VIN,WIN,IRIN,WTIN);
]

"---------------------------------------------------------------------"
"STEP 8   OUTPUT-OF-RESULTS                                           "
"---------------------------------------------------------------------"

"Normalize to % of total input energy"
ANORM = 100.0 / ((EIN + FLOAT(IQIN) * PRM) * FLOAT(NCASE));
TOTAL = 0.0;  DO I = 1,$MXREG [TOTAL = TOTAL + ESCORE(I);]

OUTPUT NCASE; (//' Energy deposited per region for', I6, ' incident particles'/
' ', 56('-') / ' Region', T25, 'EDEP (Gy)', T50, 'EDEP (%)' / ' ', 56('-'));
DO I = 1,$MXREG [
   OUTPUT I, ESCORE(I), ESCORE(I) * ANORM;
   (I7, T25, F9.3, T50, F8.3);
]
OUTPUT TOTAL * ANORM;
(' ', 56('-') / ' Total fraction of energy accounted for:', F8.3, ' %'///);

"-----------------------------------------------------------------"
"STEP 9   finish run                                              "
"-----------------------------------------------------------------"
call egs_finish;

STOP; END; "end of tutorial_2_S1 main routine"

%E  "tutorial_2_S1.mortran"
"********************************************************************"
"                                                                    "
"  SUBROUTINE AUSGAB                                                 "
"                                                                    "
"  In this AUSGAB routine for tutorial_2_S1, we score the energy     "
"  deposited in the various regions. This amounts to the total       "
"  energy reflected,deposited and transmitted by the slab.           "
"                                                                    "
"  For IARG=0, an electron or photon step is about to occur and we   "
"  score the energy deposited, if any. Note that only electrons      "
"  deposit energy during a step, and due to our geometry, electrons  "
"  only take steps in region 2 - however there is no need to check.  "
"  For IARG=1,2 and 4, particles have been discarded for falling     "
"  below various energy cutoffs and all their energy is deposited    "
"  locally (in fact EDEP = particles kinetic energy).                "
"                                                                    "
"  For IARG=3, we are discarding the particle since it is in         "
"  region 1 or 3, so score its energy.                               "
"                                                                    "
"********************************************************************"
SUBROUTINE AUSGAB(IARG);
$IMPLICIT-NONE;
$INTEGER IARG, IRL;

COMIN/EPCONT,SCORE,STACK/; "we use EDEP from EPCONT,IR(NP) from STACK"
"                           ESCORE is passed in user defined COMIN SCORE"
IF(IARG <= 4) [
   IRL = IR(NP);" pick up current region number"
   ESCORE(IRL) = ESCORE(IRL) + EDEP;
]
RETURN; END; "end of ausgab"

%E  "tutorial_2_S1.mortran"
"*********************************************************************"
"                                                                     "
"  SUBROUTINE HOWFAR                                                  "
"                                                                     "
"  HOWFAR for use with tutorial_2_S1 (same as with tutorial_1         "
"                                                                     "
"*********************************************************************"
SUBROUTINE HOWFAR;
$IMPLICIT-NONE;
$REAL TVAL;
COMIN/STACK,EPCONT,GEOM/;
"       COMMON STACK contains X,Y,Z,U,V,W,IR and NP(stack pointer)"
"       COMMON EPCONT contains IRNEW, USTEP and IDISC"
"       COMMON GEOM contains ZBOUNDS"

IF(IR(NP) = $MXREG) [ "We discard particles in the last region."
   IDISC = 1; RETURN;
]

ELSEIF(1 < IR(NP) & IR(NP) < $MXREG) [

   IF(W(NP) > 0.0) [
      "going forward - consider first since  most frequent"
      TVAL = (ZBOUNDS(IR(NP)) - Z(NP)) / W(NP); "distance to right plate"
      "                                          boundary"
      IF(TVAL > USTEP) [RETURN; "can take currently requested step"]
      ELSE [USTEP = TVAL; IRNEW = IR(NP) + 1; RETURN;]
   ] "END OF W(NP)>0 CASE"

   ELSEIF(W(NP) < 0.0) [ "going back towards origin"
      TVAL = -(Z(NP) - ZBOUNDS(IR(NP) - 1)) / W(NP); "distance to left plate"
      "                                               boundary"
      IF(TVAL > USTEP) [RETURN; "can take currently requested step"]
      ELSE [USTEP = TVAL; IRNEW = IR(NP) - 1; RETURN;]
   ] "END W(NP)<0 CASE"

   ELSEIF(W(NP) = 0.0) [ "cannot hit boundary" RETURN;]
] "end of region 2 case"

ELSEIF(IR(NP) = 1) [ "in region with source"
   IF(W(NP) >  0.0)[ "going forward"
      TVAL = (ZBOUNDS(IR(NP)) - Z(NP)) / W(NP); "distance to right boundary"
      IF(TVAL > USTEP) [RETURN; "can take currently requested step"]
      ELSE [USTEP = TVAL; IRNEW = 2; RETURN;]
   ] "END OF W(NP)>0 CASE"

   ELSEIF(W(NP) < 0.0) [ "going back towards origin"
      TVAL = - (Z(NP) / W(NP)); "distance to left plate boundary"
      IF(TVAL > USTEP) [RETURN; "can take currently requested step"]
      ELSE [IDISC = 1; RETURN; "particle is going pass the origin"]
   ] "END W(NP)<0 CASE"

   ELSEIF(W(NP) = 0.0) [ "cannot hit boundary" RETURN;]
] "end region 1 case"

END; "end of subroutine howfar"

%E  "tutorial_2_S1.mortran"
"*********************************************************************"
"                                                                     "
"  SUBROUTINE HOWNEAR                                                 "
"                                                                     "
"  The following is a general specification of HOWNEAR                "
"                                                                     "
"  Given a particle at (x,y,z) in region irl, HOWNEAR answers the     "
"  question, What is the distance to the closest boundary?            "
"                                                                     "
"  In general this can be a complex subroutine.                       "
"  Note that this subroutine must be linked to $CALL-HOWNEAR(#)       "
"                                                                     "
"*********************************************************************"
SUBROUTINE HOWNEAR(tperp, x, y, z, irl);
$IMPLICIT-NONE;
$REAL tperp, x, y, z;
$INTEGER irl;

;COMIN/GEOM/; "contains ZBOUNDS"

IF(irl = $MXREG) [
   tperp = z - ZBOUNDS(irl - 1);
]

ELSEIF(1 < irl & irl < $MXREG) [
    tperp = min((z - ZBOUNDS(irl - 1)), (ZBOUNDS(irl) - z));
]

ELSEIF(irl = 1) [
    tperp = ZBOUNDS(irl) - z;
]

END; "end of subroutine hownear"
"============================end of tutorial_2_S1.mortran================="
